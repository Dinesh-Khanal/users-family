{"version":3,"sources":["components/Member.js","components/GoalList.js","components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["Member","Math","floor","random","fm","className","src","id","alt","name","email","Search","onSearch","useState","member","setMember","style","width","padding","margin","type","value","placeholder","onChange","e","target","App","ourFamily","setOurFamily","smems","setSmems","useEffect","a","fetch","response","json","data","display","flexDirection","alignItems","backgroundColor","searItem","searchMembers","filter","mem","toLowerCase","includes","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAeeA,G,YCTPC,KAAKC,MAAsB,IAAhBD,KAAKE,UAChBF,KAAKC,MAAsB,IAAhBD,KAAKE,U,MDLT,SAAC,GAAY,IAAVC,EAAS,EAATA,GAChB,OACE,sBAAKC,UAAU,SAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAGG,GAA7B,0BACHC,IAAKJ,EAAGK,OAEV,6BAAKL,EAAGK,OACR,4BAAIL,EAAGM,UANoBN,EAAGG,MEkBrBI,EApBA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACHC,mBAAS,IADN,mBACxBC,EADwB,KAChBC,EADgB,KAO/B,OACE,mCACE,uBACEC,MARQ,CAAEC,MAAO,MAAOC,QAAS,MAAOC,OAAQ,QAShDC,KAAK,OACLC,MAAOP,EACPQ,YAAY,oBACZC,SAXe,SAACC,GACpBZ,EAASY,EAAEC,OAAOJ,OAClBN,EAAUS,EAAEC,OAAOJ,aCoCRK,EArCH,WAAO,IAAD,EACkBb,mBAAS,IAD3B,mBACTc,EADS,KACEC,EADF,OAEUf,mBAAS,IAFnB,mBAETgB,EAFS,KAEFC,EAFE,KAGhBC,oBAAS,sBAAC,8BAAAC,EAAA,sEACeC,MAAM,8CADrB,cACFC,EADE,gBAEWA,EAASC,OAFpB,OAEFC,EAFE,OAGRR,EAAaQ,GACbN,EAASM,GAJD,2CAKP,IAgBH,OACE,sBAAKpB,MAhBO,CACZqB,QAAS,OACTC,cAAe,SACfC,WAAY,SACZtB,MAAO,MACPuB,gBAAiB,OACjBrB,OAAQ,YACRD,QAAS,QAST,UACE,oBAAIb,UAAU,UAAd,gCACA,cAAC,EAAD,CAAQO,SATS,SAAC6B,GACpB,IAAMC,EAAgBf,EAAUgB,QAAO,SAACC,GAAD,OACrCA,EAAInC,KAAKoC,cAAcC,SAASL,EAASI,kBAE3Cf,EAASY,MAMP,qBAAKrC,UAAU,SAAf,SACGwB,EAAMkB,KAAI,SAAC3C,GAAD,OACT,cAAC,EAAD,CAAQA,GAAIA,aCxBP4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.47ebb4df.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Member = ({ fm }) => {\r\n  return (\r\n    <div className=\"member\" key={fm.id}>\r\n      <img\r\n        src={`https://robohash.org/${fm.id}?set=set5&size=180x180`}\r\n        alt={fm.name}\r\n      />\r\n      <h3>{fm.name}</h3>\r\n      <p>{fm.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Member;\r\n","import React, { useState } from \"react\";\r\nimport Goal from \"./Goal\";\r\nimport AddGoal from \"./AddGoal\";\r\nimport \"./GoalList.css\";\r\n\r\nconst initGoals = [\r\n  { id: Math.floor(Math.random() * 100), title: \"This is my first goal\" },\r\n  { id: Math.floor(Math.random() * 100), title: \"This is my second goal\" },\r\n];\r\n\r\nconst GoalList = () => {\r\n  const [goals, setGoals] = useState(initGoals);\r\n  const handleSubmit = (item) => {\r\n    setGoals((prevGoals) =>\r\n      prevGoals.concat({ id: Math.floor(Math.random() * 100), title: item })\r\n    );\r\n  };\r\n  return (\r\n    <div>\r\n      <AddGoal onSubmit={handleSubmit} />\r\n      <h1>List of Goals</h1>\r\n      <ul>\r\n        {goals.map((goal) => (\r\n          <Goal goal={goal} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoalList;\r\n","import React, { useState } from \"react\";\r\n\r\nconst Search = ({ onSearch }) => {\r\n  const [member, setMember] = useState(\"\");\r\n  const style = { width: \"50%\", padding: \"5px\", margin: \"10px\" };\r\n  const handleChange = (e) => {\r\n    onSearch(e.target.value);\r\n    setMember(e.target.value);\r\n  };\r\n  return (\r\n    <>\r\n      <input\r\n        style={style}\r\n        type=\"text\"\r\n        value={member}\r\n        placeholder=\"Search the member\"\r\n        onChange={handleChange}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport GoalList from \"./components/GoalList\";\r\nimport \"./App.css\";\r\nimport Member from \"./components/Member\";\r\nimport Search from \"./components/Search\";\r\n\r\nconst App = () => {\r\n  const [ourFamily, setOurFamily] = useState([]);\r\n  const [smems, setSmems] = useState([]);\r\n  useEffect(async () => {\r\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\r\n    const data = await response.json();\r\n    setOurFamily(data);\r\n    setSmems(data);\r\n  }, []);\r\n  const style = {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    width: \"80%\",\r\n    backgroundColor: \"#ccc\",\r\n    margin: \"15px auto\",\r\n    padding: \"15px\",\r\n  };\r\n  const handleSearch = (searItem) => {\r\n    const searchMembers = ourFamily.filter((mem) =>\r\n      mem.name.toLowerCase().includes(searItem.toLowerCase())\r\n    );\r\n    setSmems(searchMembers);\r\n  };\r\n  return (\r\n    <div style={style}>\r\n      <h1 className=\"heading\">Our Family Members</h1>\r\n      <Search onSearch={handleSearch} />\r\n      <div className=\"m-list\">\r\n        {smems.map((fm) => (\r\n          <Member fm={fm} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}